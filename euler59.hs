import Data.Bits
import Data.Char
import Data.List
import System.IO

main = do
    contents <- readFile "p059_cipher.txt"
    let cipher = read contents :: [Int]
    --print $ length prime
    print $ cipher
    print $ length cipher
    print $ sum $ applyKey cipher key
    {-
    let c1 = every 3 ([1,2]++cipher)
    let c2 = every 3 ([1]++cipher)
    let c3 = every 3 cipher
    print c1
    print c2
    print c3
    -}
--key = map ord "abc"
applyKey :: [Int] -> [Int] -> [Int]
applyKey xs key = map (\(k,e) -> e `xor` k) keycode
    where keycode = zip (concat . repeat $ key) xs

alph = [97..122] :: [Int]
{-
keys = [[a,b,c]|a<-[103],b<-[97..122],c<-[97..122]] :: [[Int]]
-- ord'A' = 65, ord 'z' = 122

in_range c = c <= 122 && c >= 65 || c <= 57 && c >= 49 || c == 44 || c == 32 || c == 46 -- || c == 33 || c == 63 || c == 45

tochr c = map (map chr) c 

c1 = [79,59,12,2,79,35,8,28,20,2,3,68,8,9,68,45,0,12,9,67,68,4,7,5,23,27,1,21,79] :: [Int]
c2 = [21,79,85,78,79,85]::[Int]
z =  (map (applyKey c1) keys)
c = tochr z
match = filter (all in_range) z
-}

test = concat . replicate 5 $ "abc" 
every n xs = case drop (n-1) xs of  
              (y:ys) -> y : every n ys
              [] -> []

-- used, sortBy (\i j -> compare (length i) (length j)) . group . sort $ t1
t1 = [79,2,8,2,8,45,9,4,23,21,78,71,71,2,2,9,9,19,71,21,6,2,30,31,19,73,2,6,16,15,8,71,3,2,6,32,73,71,71,20,9,15,5,14,14,71,19,32,73,71,71,2,2,2,21,15,0,15,2,20,41,15,0,31,19,19,19,2,14,64,10,2,83,14,71,20,1,6,14,15,75,9,19,20,14,71,17,71,0,71,71,2,8,73,71,2,14,19,15,2,19,8,15,15,3,12,20,71,3,15,3,12,20,4,71,17,71,19,0,20,14,71,32,71,9,45,9,15,37,19,19,71,71,11,2,21,9,6,18,19,71,0,71,71,6,2,21,9,10,15,5,14,2,2,18,71,71,20,2,14,9,71,45,9,14,2,71,20,8,19,71,0,92,2,6,8,30,71,19,20,19,19,71,0,73,71,2,9,16,71,71,2,21,71,0,75,15,0,2,11,15,19,2,21,9,71,20,8,0,8,8,71,19,19,71,21,73,87,18,6,15,0,19,71,21,71,20,6,71,21,0,15,75,15,16,11,3,9,71,4,9,2,14,16,9,2,6,73,86,17,71,71,20,16,11,3,9,6,9,15,71,9,2,11,71,71,20,8,6,2,2,71,71,19,8,11,16,71,11,17,71,10,9,6,2,2,15,75,2,6,71,2,14,19,8,2,10,4,11,2,8,32,73,84,15,71,2,2,21,71,14,14,9,71,23,20,6,5,19,21,18,14,71,8,15,6,23,20,9,21,11,75,15,71,5,19,4,2,1,10,8,86,52,19,71,21,5,6,71,10,71,3,14,3,2,71,71,21,71,8,71,73,2,6,1,11,1,9,14,9,11,2,9,1,19,18,2,73,9,16,15,2,2,71,20,11,30,19,71,8,71,71,2,9,71,9,1,15,33,15,73]
-- so in t1, 71 is probably space
t2 = [59,79,28,3,9,0,67,7,27,79,79,38,27,79,8,1,8,7,56,11,3,14,79,6,10,79,79,28,6,79,11,14,79,79,28,0,79,39,24,79,79,10,10,1,1,24,7,0,79,39,12,14,11,25,22,6,79,10,79,65,0,6,79,6,28,7,79,79,11,27,14,65,79,9,6,10,79,28,1,6,79,11,7,79,9,8,10,3,7,27,10,29,1,79,59,79,8,79,6,28,7,26,79,10,14,1,28,14,79,10,14,1,28,14,1,10,10,6,26,7,27,89,0,28,27,0,79,10,14,6,79,27,27,3,25,22,10,13,27,7,3,7,28,27,27,25,22,10,6,27,10,10,79,12,28,0,7,79,28,2,22,87,0,79,2,3,24,79,27,7,3,7,79,79,28,1,79,24,1,28,0,7,3,7,79,59,79,10,7,6,27,79,26,3,7,79,0,6,28,6,27,0,25,22,10,24,79,6,79,79,2,6,0,7,24,3,79,79,27,3,0,7,7,24,3,24,79,11,27,0,7,6,79,10,0,11,6,72,29,0,6,79,2,7,79,79,2,79,79,10,6,7,79,1,14,79,11,2,8,6,0,79,0,10,7,24,79,27,12,31,11,94,45,79,79,3,7,13,6,10,7,79,11,12,31,11,6,79,79,25,27,79,8,79,79,12,10,7,11,1,9,0,79,79,10,14,79,13,1,59,28,28,0,14,7,6,3,6,7,10,3,1,9,2,26,1,14,6,79,79,14,79,6,29,6,7,0,28,29,79,11,91,0,7,56,11,10,2,7,14,14,79,25,79,29,0,10,27,14,1,26,79,79,28,26,79,79,9,3,8,0,79,11,14,7,3,28,79,11,10,14,79,10,7,79,0,67,7,8,29,0,27,79,3,60,79,79,10,14,10]
-- 79
t3 = [12,35,20,68,68,12,68,5,1,85,85,10,12,6,13,13,68,1,11,68,22,0,1,23,0,44,19,68,16,35,72,10,12,19,68,0,86,1,5,13,16,68,3,10,3,13,68,0,87,1,22,16,68,1,16,10,16,22,13,68,16,10,1,23,68,5,12,0,10,68,15,68,40,1,16,8,19,68,68,9,5,68,13,8,1,13,23,13,16,11,18,29,1,81,12,8,12,23,10,68,22,3,16,68,22,1,72,10,16,68,22,1,68,10,1,22,28,10,13,68,74,68,0,1,68,12,16,68,20,23,83,11,1,68,1,11,68,11,68,1,13,16,11,12,68,1,11,68,3,68,8,18,6,5,1,2,13,16,16,11,74,68,12,12,23,2,5,10,68,1,13,16,12,19,68,8,5,13,1,68,68,1,13,16,93,12,11,68,11,23,12,16,1,13,16,19,68,18,68,3,68,68,1,11,72,5,3,10,16,7,1,10,68,1,11,0,85,38,68,16,17,68,1,11,0,5,9,1,12,17,68,9,16,68,22,68,0,16,1,3,30,12,68,1,12,7,1,85,33,10,10,13,11,68,10,5,68,11,68,23,19,20,20,72,1,5,10,68,7,16,74,86,17,16,5,68,11,1,1,0,13,5,68,7,16,68,9,12,3,1,12,22,12,16,6,11,68,13,22,68,68,0,85,48,29,22,22,11,69,12,68,68,16,68,29,7,68,22,68,23,16,3,22,68,9,68,23,11,11,20,10,16,23,1,22,68,9,68,11,35,74,68,68,1,11,68,7,1,17,10,10,8,1,12,1,10,5,12,9,3,23,44,19,68,8,11,17,5,13,68,18,5,68,13,2,10,23,37,68,68,18,23,10,13,3,22,68,1,8,29,2,12,11,29,11,11,16,68,16,22]
-- 68

key = map ord "god"

-- Hmm, I was getting to '(' being first. Looking for where the spaces are is much better than that though... @_@
-- Brute-forcing is kinda tricky... if you allow all the non-alphabet characters, then you get nonsense x_x
-- Brute-forcing bits at a time seemed like it'd work, because I know the key-length ---.
-- Goddamnit! I managed to parse the first sentence into enough to recognize a "The"... which is the key. Fucking hell >_>

-- An utter mess and learning experience xD
